#!/usr/bin/env node
let program = require( 'commander' );
const pkg = require( './package' );
const fs = require( 'fs' );
const validator = require( './src/validator' );
const { closeBrowser } = require( './src/headless-browser' );

const _getFileContents = filePath => {
    return new Promise( ( resolve, reject ) => {
        fs.readFile( filePath, 'utf8', ( err, xform ) => {
            if ( err ) {
                if ( err.code === 'ENOENT' ) {
                    err = `File: ${filePath} does not exist.`;
                }
                reject( err );
            } else {
                resolve( xform );
            }
        } );
    } );
};

const _output = ( issues = [], error = false ) => {
    if ( issues.length ) {
        console[ error ? 'error' : 'log' ]( `\n\n${issues.join( '\n\n' )}` );
    }
};

program
    .usage( '[options] <file>' )
    .version( pkg.version )
    .option( '-m, --me', 'get personal validation' )
    .option( '-d, --debug', 'output raw errors' )
    .option( '-oc, --openclinica', 'run additional custom OpenClinica validation rules and use a custom XPath evaluator' )
    .parse( process.argv );

const xformFile = program.args[ 0 ];
const options = program.opts();

if ( options.me ) {
    console.log( 'You are correct.\nYour feelings matter.\nYou are wonderful and the world is better with you in it.' );
    process.exit( 0 );
} else if ( xformFile ) {
    console.log( `Enketo validating ${xformFile}` );

    let exceptions = null;
    let result = null;

    _getFileContents( xformFile )
        .then( xformStr => validator.validate( xformStr, options ) )
        .catch( ( errors = [] ) => {
            exceptions = Array.isArray( errors ) ? errors : [ errors ];
        } )
        .then( ( res = {} ) => {
            result = res;

            return closeBrowser( );
        } )
        .finally( () => {
            if ( exceptions ){
                _output( exceptions, true );
                process.exit( 1 );
            }

            _output( result.warnings );
            _output( result.errors, true );

            if ( result.errors.length ) {
                _output( [ options.openclinica ? '' : 'Result: Invalid\n\n' ], true );
                process.exit( 1 );
            } else {
                _output( [ options.openclinica ? '' : '>> XForm is valid! See above for any warnings.\n\n' ] );
                process.exit( 0 );
            }
        } );

} else {
    console.error( 'Nothing to do. No XForm File provided. Use --help flag to see manual.' );
    process.exit( 1 );
}
